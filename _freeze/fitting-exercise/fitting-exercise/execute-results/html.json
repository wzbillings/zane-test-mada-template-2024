{
  "hash": "d6844ea357bf20499b600062a186d06c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Model Fitting Exercise\"\ndate: last-modified\ndate-format: iso\nexecute: \n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Declare package dependencies\nbox::use(\n\treadr,\n\tcurl,\n\tggplot2,\n\thgp\n)\n\n# Set global ggplot2 theme\nggplot2::theme_set(hgp::theme_ms())\n```\n:::\n\n\n\nIn this exercise, we'll practice data fitting using the Mavoglurant drug\ncandidate data. More information can be found\n[in the assignment description](https://web.archive.org/web/20240226224020/https://andreashandel.github.io/MADAcourse/content/model-fitting/assessment-model-fitting.html).\n\n# Data processing and exploration\n\nFirst we need to get the data from [the github](https://github.com/metrumresearchgroup/BayesPBPK-tutorial).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If the local copy already exists, use that. Otherwise download it.\nfile_path <- here::here(\"fitting-exercise\", \"raw-data.Rds\")\nchk <- file.exists(file_path)\n\nif (isTRUE(chk)) {\n\traw_data <- readr::read_rds(file_path)\n} else {\n\t# Read the data from the GitHub page\n\tdata_url <- paste0(\n\t\t\"https://raw.githubusercontent.com/metrumresearchgroup/BayesPBPK-tutorial/\",\n\t\t\"master/data/Mavoglurant_A2121_nmpk.csv\"\n\t)\n\traw_data <- readr::read_csv(\n\t\tdata_url,\n\t\t# The parser will guess that all variables are numeric, but this is not\n\t\t# quite correct.\n\t\tcol_types = \"cffffddfddffdffdd\"\n\t)\n\t\n\t# Save local copy\n\treadr::write_rds(raw_data, file_path)\n}\n\nskimr::skim(raw_data)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |raw_data |\n|Number of rows           |2678     |\n|Number of columns        |17       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|character                |1        |\n|factor                   |9        |\n|numeric                  |7        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|ID            |         0|             1|   3|   3|     0|      120|          0|\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                         |\n|:-------------|---------:|-------------:|:-------|--------:|:----------------------------------|\n|CMT           |         0|             1|FALSE   |        2|2: 2480, 1: 198                    |\n|EVID          |         0|             1|FALSE   |        2|0: 2480, 1: 198                    |\n|EVI2          |         0|             1|FALSE   |        3|0: 2480, 1: 120, 4: 78             |\n|MDV           |         0|             1|FALSE   |        2|0: 2427, 1: 251                    |\n|AMT           |         0|             1|FALSE   |        4|0: 2480, 25: 94, 50: 92, 37.: 12   |\n|OCC           |         0|             1|FALSE   |        2|1: 1665, 2: 1013                   |\n|RATE          |         0|             1|FALSE   |        5|0: 2480, 150: 93, 300: 92, 225: 12 |\n|SEX           |         0|             1|FALSE   |        2|1: 2335, 2: 343                    |\n|RACE          |         0|             1|FALSE   |        4|1: 1669, 2: 772, 88: 185, 7: 52    |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|     sd|    p0|   p25|   p50|    p75|    p100|hist  |\n|:-------------|---------:|-------------:|------:|------:|-----:|-----:|-----:|------:|-------:|:-----|\n|DV            |         0|             1| 179.93| 226.28|  0.00| 23.52| 74.20| 283.00| 1730.00|▇▂▁▁▁ |\n|LNDV          |         0|             1|   4.08|   1.88|  0.00|  3.16|  4.31|   5.64|    7.46|▃▃▇▇▅ |\n|TIME          |         0|             1|   5.85|   8.91|  0.00|  0.58|  2.25|   6.36|   48.22|▇▁▁▁▁ |\n|DOSE          |         0|             1|  37.37|  12.05| 25.00| 25.00| 37.50|  50.00|   50.00|▇▁▁▁▇ |\n|AGE           |         0|             1|  32.90|   8.87| 18.00| 26.00| 31.00|  40.00|   50.00|▆▇▅▅▅ |\n|WT            |         0|             1|  83.16|  12.48| 56.60| 73.30| 82.60|  90.60|  115.30|▂▇▇▅▁ |\n|HT            |         0|             1|   1.76|   0.08|  1.52|  1.71|  1.78|   1.82|    1.93|▁▃▆▇▃ |\n\n\n:::\n:::\n\n\nNow we want to make some exploratory plots. For the first part, we need to make\na plot of the outcome variable `DV` vs `TIME` stratified by `DOSE` using `ID`\nas a grouping factor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data |>\n\tggplot2::ggplot() +\n\tggplot2::aes(\n\t\tx = TIME,\n\t\ty = DV,\n\t\tgroup = ID\n\t) +\n\tggplot2::geom_line(alpha = 0.25, show.legend = FALSE) +\n\tggplot2::facet_wrap(facets = ggplot2::vars(DOSE), labeller = \"label_both\")\n```\n\n::: {.cell-output-display}\n![](fitting-exercise_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nOK, we can see clearly that there are less people in the 37.5 dose group than\nthe other two, and in the other two there were also multiple trajectories that\nstop early for some reason. Let's take a quick look at how many observations\nwe have for each person.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nID_counts <- dplyr::count(raw_data, ID) |> dplyr::pull(n) |> table()\nknitr::kable(ID_counts)\n```\n\n::: {.cell-output-display}\n\n\n|Var1 | Freq|\n|:----|----:|\n|13   |    6|\n|15   |    3|\n|16   |   33|\n|25   |    1|\n|26   |   77|\n\n\n:::\n:::\n\n\nThere were 120 different subjects recorded in the\ndataset, and the majority were observed 26 times,\nwith some systematic patterns.\n\nNext we need to keep only the `OCC = 1` observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_occ1 <- raw_data |>\n\tdplyr::filter(OCC == 1)\n```\n:::\n\n\nNow let's remake that plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_occ1 |>\n\tggplot2::ggplot() +\n\tggplot2::aes(\n\t\tx = TIME,\n\t\ty = DV,\n\t\tgroup = ID\n\t) +\n\tggplot2::geom_line(alpha = 0.25, show.legend = FALSE) +\n\tggplot2::facet_wrap(facets = ggplot2::vars(DOSE), labeller = \"label_both\")\n```\n\n::: {.cell-output-display}\n![](fitting-exercise_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis plot looks slightly different, which indicates that we were likely\naggregating different trajectories together -- it seems that some patients\nwere observed multiple times.\n\n## Aggregating time values\n\nSince we don't want to do the time-series analysis, we'll aggregate here. First\nwe want to calculate the sum over all the non-zero time points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_t_sums <- dat_occ1 |>\n\t# First remove all of the time point zeroes\n\tdplyr::filter(TIME != 0) |>\n\t# Aggregate over each individual\n\tdplyr::group_by(ID) |>\n\t# Sum up the outcome variables\n\tdplyr::summarize(Y = sum(DV))\n```\n:::\n\n\nNow we'll filter so we only have the time-zero values, and we'll join our\nnew variable back to that dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_time_zero <- dat_occ1 |>\n\tdplyr::filter(TIME == 0)\n\ndat_joined <- dplyr::left_join(dat_time_zero, dat_t_sums, by = \"ID\")\n```\n:::\n\n\nNow since we already have race and sex stored a factors we just need to select\nthe factors that we need for modeling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_models <- dat_joined |>\n\tdplyr::select(Y, DOSE, RATE, AGE, SEX, RACE, WT, HT) |>\n\tdplyr::rename_with(tolower) |>\n\tdplyr::mutate(dplyr::across(dplyr::where(is.factor), forcats::fct_drop))\n\ndplyr::glimpse(dat_models)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 120\nColumns: 8\n$ y    <dbl> 2690.52, 2638.81, 2149.61, 1788.89, 3126.37, 2336.89, 3007.20, 27…\n$ dose <dbl> 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,…\n$ rate <fct> 75, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 225, 2…\n$ age  <dbl> 42, 24, 31, 46, 41, 27, 23, 20, 23, 28, 46, 22, 43, 50, 19, 26, 3…\n$ sex  <fct> 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ race <fct> 2, 2, 1, 1, 2, 2, 1, 88, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1…\n$ wt   <dbl> 94.3, 80.4, 71.8, 77.4, 64.3, 74.1, 87.9, 61.9, 65.3, 103.5, 83.0…\n$ ht   <dbl> 1.769997, 1.759850, 1.809847, 1.649993, 1.560052, 1.829862, 1.850…\n```\n\n\n:::\n:::\n\n\n# EDA\n\nput some EDA plots here\n\n# Model fitting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ broom        1.0.5      ✔ recipes      1.0.10\n✔ dials        1.2.1      ✔ rsample      1.2.0 \n✔ dplyr        1.1.4      ✔ tibble       3.2.1 \n✔ ggplot2      3.4.4      ✔ tidyr        1.3.1 \n✔ infer        1.0.6      ✔ tune         1.1.2 \n✔ modeldata    1.3.0      ✔ workflows    1.1.4 \n✔ parsnip      1.2.0      ✔ workflowsets 1.0.1 \n✔ purrr        1.0.2      ✔ yardstick    1.3.0 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny_ap_recipe <- recipe(y ~ ., data = dat_models)\ny_dose_recipe <- recipe(y ~ dose, data = dat_models)\nlm_spec <- linear_reg() |>\n\tset_mode(\"regression\") |>\n\tset_engine(\"lm\")\n\ny_dose_wf <- workflow() |>\n\tadd_model(lm_spec) |>\n\tadd_recipe(y_dose_recipe)\n\ny_ap_wf <- workflow() |>\n\tadd_model(lm_spec) |>\n\tadd_recipe(y_ap_recipe)\n\ny_dose_fit <- fit(y_dose_wf, data = dat_models)\ny_dose_aug <- augment(y_dose_fit, dat_models)\nyardstick::rmse(y_dose_aug, truth = y, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        666.\n```\n\n\n:::\n\n```{.r .cell-code}\nyardstick::rsq(y_dose_aug, truth = y, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.516\n```\n\n\n:::\n\n```{.r .cell-code}\ny_ap_fit <- fit(y_ap_wf, data = dat_models)\ny_ap_aug <- augment(y_ap_fit, dat_models)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\", : prediction from rank-deficient fit; consider predict(.,\nrankdeficient=\"NA\")\n```\n\n\n:::\n\n```{.r .cell-code}\nyardstick::rmse(y_ap_aug, truth = y, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        583.\n```\n\n\n:::\n\n```{.r .cell-code}\nyardstick::rsq(y_ap_aug, truth = y, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.630\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsex_ap_recipe <- recipe(sex ~ ., data = dat_models)\nsex_dose_recipe <- recipe(sex ~ dose, data = dat_models)\nlog_spec <- logistic_reg() |>\n\tset_mode(\"classification\") |>\n\tset_engine(\"glm\")\n\nsex_dose_wf <- workflow() |>\n\tadd_model(log_spec) |>\n\tadd_recipe(sex_dose_recipe)\n\nsex_ap_wf <- workflow() |>\n\tadd_model(log_spec) |>\n\tadd_recipe(sex_ap_recipe)\n\nsex_dose_fit <- fit(sex_dose_wf, data = dat_models)\nsex_dose_aug <- augment(sex_dose_fit, dat_models)\nyardstick::accuracy(sex_dose_aug, truth = sex, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.867\n```\n\n\n:::\n\n```{.r .cell-code}\nyardstick::roc_auc(sex_dose_aug, truth = sex, .pred_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.592\n```\n\n\n:::\n\n```{.r .cell-code}\nsex_ap_fit <- fit(sex_ap_wf, data = dat_models)\nsex_ap_aug <- augment(sex_ap_fit, dat_models)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nWarning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\nprediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n```\n\n\n:::\n\n```{.r .cell-code}\nyardstick::accuracy(sex_ap_aug, truth = sex, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.958\n```\n\n\n:::\n\n```{.r .cell-code}\nyardstick::roc_auc(sex_ap_aug, truth = sex, .pred_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.983\n```\n\n\n:::\n:::\n",
    "supporting": [
      "fitting-exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}